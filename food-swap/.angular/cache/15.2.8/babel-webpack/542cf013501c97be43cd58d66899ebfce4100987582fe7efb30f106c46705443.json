{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestApiService {\n  constructor(http) {\n    this.http = http;\n    // Define API\n    this.apiURL = 'http://localhost:3000';\n    // Http Options\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  // HttpClient API get() method => Fetch employees list\n  getEmployees() {\n    return this.http.get(this.apiURL + '/user').pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API get() method => Fetch user\n  getEmployee(id) {\n    return this.http.get(this.apiURL + '/employees/' + id).pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API post() method => Create employee\n  createEmployee(employee) {\n    return this.http.post(this.apiURL + '/employees', JSON.stringify(employee), this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API put() method => Update employee\n  updateEmployee(id, employee) {\n    return this.http.put(this.apiURL + '/employees/' + id, JSON.stringify(employee), this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // HttpClient API delete() method => Delete employee\n  deleteEmployee(id) {\n    return this.http.delete(this.apiURL + '/employees/' + id, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n  }\n  // Error handling\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\nRestApiService.ɵfac = function RestApiService_Factory(t) {\n  return new (t || RestApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestApiService,\n  factory: RestApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,KAAK,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMlD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB;IACA,WAAM,GAAG,uBAAuB;IAIhC;IACA,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EARsC;EAUvC;EACAQ,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAAW,IAAI,CAACC,MAAM,GAAG,OAAO,CAAC,CACpCC,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACjD;EAEA;EACAC,WAAW,CAACC,EAAO;IACjB,OAAO,IAAI,CAACR,IAAI,CACbG,GAAG,CAAW,IAAI,CAACC,MAAM,GAAG,aAAa,GAAGI,EAAE,CAAC,CAC/CH,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACjD;EAEA;EACAG,cAAc,CAACC,QAAa;IAC1B,OAAO,IAAI,CAACV,IAAI,CACbW,IAAI,CACH,IAAI,CAACP,MAAM,GAAG,YAAY,EAC1BQ,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,EACxB,IAAI,CAACI,WAAW,CACjB,CACAT,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACjD;EAEA;EACAS,cAAc,CAACP,EAAO,EAAEE,QAAa;IACnC,OAAO,IAAI,CAACV,IAAI,CACbgB,GAAG,CACF,IAAI,CAACZ,MAAM,GAAG,aAAa,GAAGI,EAAE,EAChCI,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,EACxB,IAAI,CAACI,WAAW,CACjB,CACAT,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EACjD;EAEA;EACAW,cAAc,CAACT,EAAO;IACpB,OAAO,IAAI,CAACR,IAAI,CACbkB,MAAM,CAAW,IAAI,CAACd,MAAM,GAAG,aAAa,GAAGI,EAAE,EAAE,IAAI,CAACM,WAAW,CAAC,CACpET,IAAI,CAACT,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC;EAC/C;EACF;EACAA,WAAW,CAACa,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,MAAM,CAACC,KAAK,CAACL,YAAY,CAAC;IAC1B,OAAOzB,UAAU,CAAC,MAAK;MACrB,OAAOyB,YAAY;IACrB,CAAC,CAAC;EACJ;;AArEWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFb;AAAM","names":["HttpHeaders","throwError","retry","catchError","RestApiService","constructor","http","headers","getEmployees","get","apiURL","pipe","handleError","getEmployee","id","createEmployee","employee","post","JSON","stringify","httpOptions","updateEmployee","put","deleteEmployee","delete","error","errorMessage","ErrorEvent","message","status","window","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\thoma\\OneDrive\\Desktop\\repoHackerburg\\FoodSwap\\food-swap\\src\\app\\shared\\rest-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Employee } from '../shared/employee';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RestApiService {\n  // Define API\n  apiURL = 'http://localhost:3000';\n  constructor(private http: HttpClient) {}\n\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n  \n  // HttpClient API get() method => Fetch employees list\n  getEmployees(): Observable<Employee> {\n    return this.http\n      .get<Employee>(this.apiURL + '/user')\n      .pipe(retry(1), catchError(this.handleError));\n  }\n  \n  // HttpClient API get() method => Fetch user\n  getEmployee(id: any): Observable<Employee> {\n    return this.http\n      .get<Employee>(this.apiURL + '/employees/' + id)\n      .pipe(retry(1), catchError(this.handleError));\n  }\n  \n  // HttpClient API post() method => Create employee\n  createEmployee(employee: any): Observable<Employee> {\n    return this.http\n      .post<Employee>(\n        this.apiURL + '/employees',\n        JSON.stringify(employee),\n        this.httpOptions\n      )\n      .pipe(retry(1), catchError(this.handleError));\n  }\n  \n  // HttpClient API put() method => Update employee\n  updateEmployee(id: any, employee: any): Observable<Employee> {\n    return this.http\n      .put<Employee>(\n        this.apiURL + '/employees/' + id,\n        JSON.stringify(employee),\n        this.httpOptions\n      )\n      .pipe(retry(1), catchError(this.handleError));\n  }\n  \n  // HttpClient API delete() method => Delete employee\n  deleteEmployee(id: any) {\n    return this.http\n      .delete<Employee>(this.apiURL + '/employees/' + id, this.httpOptions)\n      .pipe(retry(1), catchError(this.handleError)); \n    }\n  // Error handling\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}